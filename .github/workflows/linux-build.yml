name: Linux Build

on:
  push:
    branches: [ axis ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ axis ]

permissions:
  contents: write
  
jobs:
  build:
    strategy:
      matrix:
        arch: [x64, x86, arm64, armv7, armv6, riscv64]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Install Common Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            clang \
            cmake \
            ninja-build \
            pkg-config \
            libpng-dev \
            libfreetype6-dev \
            libwebp-dev \
            libtiff-dev \
            libjpeg-dev \
            libharfbuzz-dev \
            libgraphite2-dev \
            wayland-protocols \
            libwayland-dev \
            libx11-dev \
            libxext-dev \
            libxrandr-dev \
            libxcursor-dev \
            libxfixes-dev \
            libxi-dev \
            libxss-dev \
            libxxf86vm-dev \
            libgl1-mesa-dev

      - name: Install Architecture-Specific Dependencies
        run: |
          if [ "${{ matrix.arch }}" = "x86" ]; then
            sudo apt-get install -y \
              gcc-multilib \
              g++-multilib \
              lib32stdc++-11-dev \
              lib32gcc-11-dev \
              libx11-dev:i386 \
              libxext-dev:i386 \
              libxrandr-dev:i386 \
              libxcursor-dev:i386 \
              libxfixes-dev:i386 \
              libxi-dev:i386 \
              libxss-dev:i386 \
              libxxf86vm-dev:i386 \
              libgl1-mesa-dev:i386 \
              libpng-dev:i386 \
              libfreetype6-dev:i386
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          elif [ "${{ matrix.arch }}" = "armv7" ] || [ "${{ matrix.arch }}" = "armv6" ]; then
            sudo apt-get install -y gcc-arm-linux-gnueabihf
          elif [ "${{ matrix.arch }}" = "riscv64" ]; then
            sudo apt-get install -y gcc-riscv64-linux-gnu
          fi
      - name: Install xmake
        run: |
          wget https://xmake.io/shget.text -O - | bash
          source ~/.xmake/profile

      - name: Set cross compilation flags
        id: flags
        run: |
          if [ "${{ matrix.arch }}" = "x64" ]; then
            echo "arch_flag=x86_64" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.arch }}" = "x86" ]; then
            echo "arch_flag=i386" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            echo "arch_flag=arm64" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.arch }}" = "armv7" ]; then
            echo "arch_flag=armv7" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.arch }}" = "armv6" ]; then
            echo "arch_flag=armv6" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.arch }}" = "riscv64" ]; then
            echo "arch_flag=riscv64" >> $GITHUB_OUTPUT
          fi

      - name: Build with xmake
        run: |
          xmake clean
          xmake f -p linux -a ${{ steps.flags.outputs.arch_flag }} -y
          xmake -y

      - name: Rename binary
        run: |
          mkdir -p artifacts
          cp build/clay/main artifacts/myquest-linux-${{ matrix.arch }}
          chmod +x artifacts/myquest-linux-${{ matrix.arch }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linux-${{ matrix.arch }}-build
          path: artifacts/myquest-linux-${{ matrix.arch }}
      
      - name: Generate date
        id: date
        if: "!startsWith(github.ref, 'refs/tags/')"
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

      - name: Create Nightly Release
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nightly-${{ steps.date.outputs.date }}
          name: Development Build ${{ steps.date.outputs.date }}
          draft: false
          prerelease: true
          files: |
            artifacts/myquest-linux-${{ matrix.arch }}

      - name: Create Tagged Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/myquest-linux-${{ matrix.arch }}