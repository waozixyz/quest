name: Linux Build

on:
  push:
    branches: [ axis ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ axis ]

permissions:
  contents: write
  
jobs:
  build:
    strategy:
      matrix:
        include:
          - arch: x86_64
            docker_image: ubuntu:latest
            use_docker: false
          - arch: i686
            docker_image: i386/ubuntu:latest
            use_docker: true
          - arch: arm64
            docker_image: arm64v8/ubuntu:latest
            use_docker: true
          - arch: armv7
            docker_image: arm32v7/ubuntu:latest
            use_docker: true
          - arch: armv6
            docker_image: arm32v6/ubuntu:latest
            use_docker: true
          - arch: riscv64
            docker_image: riscv64/ubuntu:latest
            use_docker: true
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Set up QEMU
        if: matrix.use_docker
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Native Build (x86_64)
        if: matrix.arch == 'x86_64'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            clang \
            cmake \
            ninja-build \
            pkg-config \
            libpng-dev \
            libfreetype6-dev \
            libwebp-dev \
            libtiff-dev \
            libjpeg-dev \
            libharfbuzz-dev \
            libgraphite2-dev \
            wayland-protocols \
            libwayland-dev \
            libx11-dev \
            libxext-dev \
            libxrandr-dev \
            libxcursor-dev \
            libxfixes-dev \
            libxi-dev \
            libxss-dev \
            libxxf86vm-dev \
            libgl1-mesa-dev
          wget https://xmake.io/shget.text -O - | bash
          source ~/.xmake/profile
          xmake clean
          xmake f -p linux -a x86_64 -y
          xmake -y

      - name: Cross Build (non-x86_64)
        if: matrix.use_docker
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .github/workflows/Dockerfile.${{ matrix.arch }}
          platforms: linux/${{ matrix.arch }}
          outputs: type=local,dest=build/clay

      - name: Rename binary
        run: |
          mkdir -p artifacts
          cp build/clay/main artifacts/myquest-linux-${{ matrix.arch }}
          chmod +x artifacts/myquest-linux-${{ matrix.arch }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linux-${{ matrix.arch }}-build
          path: artifacts/myquest-linux-${{ matrix.arch }}
      
      - name: Generate date
        id: date
        if: "!startsWith(github.ref, 'refs/tags/')"
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

      - name: Create Nightly Release
        if: "!startsWith(github.ref, 'refs/tags/')"
        continue-on-error: true
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nightly-${{ steps.date.outputs.date }}
          name: Development Build ${{ steps.date.outputs.date }}
          draft: false
          prerelease: true
          files: |
            artifacts/myquest-linux-${{ matrix.arch }}

      - name: Create Tagged Release
        if: startsWith(github.ref, 'refs/tags/')
        continue-on-error: true
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/myquest-linux-${{ matrix.arch }}